{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Frontend-Projects/React/jobhuntly/client/src/Pages/SearchJobs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SearchBar from '../Components/SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchJobs() {\n  _s();\n  const [jobs, setJobs] = useState([]);\n\n  // Map of location codes to full names\n  const locationMapping = {\n    AL: 'Alabama',\n    AK: 'Alaska'\n    // Add other mappings here\n  };\n  const fetchJobs = async (jobTitle, locationCode) => {\n    // Convert location code to full name\n    const locationName = locationMapping[locationCode] || '';\n    const url = `https://indeed12.p.rapidapi.com/jobs/search?query=${jobTitle}&location=${locationName}&page_id=1&locality=us&fromage=1&radius=25`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': 'your-rapidapi-key',\n        'X-RapidAPI-Host': 'indeed12.p.rapidapi.com'\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      if (data.hits) {\n        setJobs(Object.values(data.hits)); // Convert hits object to array\n      } else {\n        setJobs([]); // In case hits is not present\n      }\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n      setJobs([]); // Set jobs to an empty array on error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: fetchJobs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jobs.length > 0 ? jobs.map((job, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: job.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.company\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No jobs found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchJobs, \"iF/FKfpnfHoQh/M4HqAdId1E4FM=\");\n_c = SearchJobs;\nexport default SearchJobs;\nvar _c;\n$RefreshReg$(_c, \"SearchJobs\");","map":{"version":3,"names":["React","useState","SearchBar","jsxDEV","_jsxDEV","SearchJobs","_s","jobs","setJobs","locationMapping","AL","AK","fetchJobs","jobTitle","locationCode","locationName","url","options","method","headers","response","fetch","data","json","hits","Object","values","error","console","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","length","map","job","index","title","company","location","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/Frontend-Projects/React/jobhuntly/client/src/Pages/SearchJobs.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport SearchBar from '../Components/SearchBar';\n\nfunction SearchJobs() {\n  const [jobs, setJobs] = useState([]);\n\n  // Map of location codes to full names\n  const locationMapping = {\n    AL: 'Alabama',\n    AK: 'Alaska',\n    // Add other mappings here\n  };\n\n  const fetchJobs = async (jobTitle, locationCode) => {\n    // Convert location code to full name\n    const locationName = locationMapping[locationCode] || '';\n    const url = `https://indeed12.p.rapidapi.com/jobs/search?query=${jobTitle}&location=${locationName}&page_id=1&locality=us&fromage=1&radius=25`;\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': 'your-rapidapi-key',\n        'X-RapidAPI-Host': 'indeed12.p.rapidapi.com'\n      }\n    };\n\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      if (data.hits) {\n        setJobs(Object.values(data.hits)); // Convert hits object to array\n      } else {\n        setJobs([]); // In case hits is not present\n      }\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n      setJobs([]); // Set jobs to an empty array on error\n    }\n  };\n\n  return (\n    <div>\n      <SearchBar onSearch={fetchJobs} />\n      <div>\n        {jobs.length > 0 ? (\n          jobs.map((job, index) => (\n            <div key={index}>\n              <h3>{job.title}</h3>\n              <p>{job.company}</p>\n              <p>{job.location}</p>\n            </div>\n          ))\n        ) : (\n          <p>No jobs found.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchJobs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMQ,eAAe,GAAG;IACtBC,EAAE,EAAE,SAAS;IACbC,EAAE,EAAE;IACJ;EACF,CAAC;EAED,MAAMC,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,YAAY,KAAK;IAClD;IACA,MAAMC,YAAY,GAAGN,eAAe,CAACK,YAAY,CAAC,IAAI,EAAE;IACxD,MAAME,GAAG,GAAG,qDAAqDH,QAAQ,aAAaE,YAAY,4CAA4C;IAE9I,MAAME,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,gBAAgB,EAAE,mBAAmB;QACrC,iBAAiB,EAAE;MACrB;IACF,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;MAC1C,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,IAAI,EAAE;QACbhB,OAAO,CAACiB,MAAM,CAACC,MAAM,CAACJ,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLhB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CnB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACf;EACF,CAAC;EAED,oBACEJ,OAAA;IAAAyB,QAAA,gBACEzB,OAAA,CAACF,SAAS;MAAC4B,QAAQ,EAAElB;IAAU;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClC9B,OAAA;MAAAyB,QAAA,EACGtB,IAAI,CAAC4B,MAAM,GAAG,CAAC,GACd5B,IAAI,CAAC6B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAClBlC,OAAA;QAAAyB,QAAA,gBACEzB,OAAA;UAAAyB,QAAA,EAAKQ,GAAG,CAACE;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpB9B,OAAA;UAAAyB,QAAA,EAAIQ,GAAG,CAACG;QAAO;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpB9B,OAAA;UAAAyB,QAAA,EAAIQ,GAAG,CAACI;QAAQ;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHbI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACN,CAAC,gBAEF9B,OAAA;QAAAyB,QAAA,EAAG;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACrB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CAvDQD,UAAU;AAAAqC,EAAA,GAAVrC,UAAU;AAyDnB,eAAeA,UAAU;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}